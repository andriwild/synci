name: Docker build and push

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  push:
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_BACKEND_NAME: '${{ github.repository }}-backend'
  IMAGE_FRONTEND_NAME: '${{ github.repository }}-frontend'

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          pg_isready
      - name: Create PostgreSQL User
        run: |
          sudo -u postgres psql --command="ALTER USER postgres WITH PASSWORD 'postgres'"
    #      sudo -u postgres createuser -s -d -r synci
      - name: Create PostgreSQL DB
        run: |
          sudo -u postgres psql --command='CREATE DATABASE "synci-db" OWNER postgres;'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create PostgreSQL DB table
        run: |
          pwd
          sudo chmod 777 -R .
          ls -l ./database
          psql -U postgres -d synci-db -a -f /home/runner/work/synci/synci/database/synci-schema.sql
     
      # - name: Frontend Docker Build 
      #   run: |
      #     docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND_NAME }}:${{ github.ref_name }} ./frontend

      # - name: Frontend Docker Push
      #   run: |
      #     docker push ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND_NAME }}:${{ github.ref_name }}
      #     docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND_NAME }}:${{ github.ref_name }} ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND_NAME }}:latest
      #     docker push ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND_NAME }}:latest

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
          
      - name: Backend Docker Build 
        run: |
          docker build --network="host" -t ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND_NAME }}:${{ github.ref_name }} ./backend

      - name: Backend Docker Push
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND_NAME }}:${{ github.ref_name }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND_NAME }}:${{ github.ref_name }} ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND_NAME }}:latest


