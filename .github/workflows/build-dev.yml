name: dev build and push

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  push:
    branches:
      - dev 

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

  POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  KEYCLOAK_CLIENT_ID: ${{secrets.KEYCLOAK_CLIENT_ID}}
  KEYCLOAK_CLIENT_SECRET: ${{secrets.KEYCLOAK_CLIENT_SECRET}}
  KEYCLOAK_GITHUB_SECRET: ${{secrets.KEYCLOAK_GITHUB_SECRET}}
  KEYCLOAK_GOOGLE_SECRET: ${{secrets.KEYCLOAK_GOOGLE_SECRET}}
  KEYCLOAK_ADMIN: ${{secrets.KEYCLOAK_ADMIN}}
  KEYCLOAK_ADMIN_PASSWORD: ${{secrets.KEYCLOAK_ADMIN_PASSWORD}}
  POSTGRES_KEYCLOAK_USER: ${{secrets.POSTGRES_KEYCLOAK_USER}}
  POSTGRES_KEYCLOAK_PASSWORD: ${{secrets.POSTGRES_KEYCLOAK_PASSWORD}}
  
  BACKEND_PORT: 8081
  FRONTEND_PORT: 5174

  STAGE: dev

  VITE_BACKEND_URL: https://dev.synci.awild.ch

jobs:

  build_backend:
    name: Build backend
    runs-on: ubuntu-latest

    steps:
      - name: Start PostgreSQL service
        run: |
          sudo systemctl start postgresql.service
          pg_isready

      - name: Update db user
        run: |
          sudo -u postgres psql --command="ALTER USER postgres WITH PASSWORD 'postgres'"

      - name: Create synci database
        run: |
          sudo -u postgres psql --command='CREATE DATABASE "synci-db" OWNER postgres;'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build backend image 
        run: |
          docker build --network="host" --build-arg KEYCLOAK_URL -t ${{ env.REGISTRY }}/${{ github.repository }}/backend-${{ env.STAGE }}:latest ./backend

      - name: Push backend image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/backend-${{ env.STAGE }}:latest
     

  build_frontend:
    name: Build frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build frontend image
        run: |
          docker build --build-arg VITE_STAGE --build-arg VITE_BACKEND_URL --build-arg VITE_KEYCLOAK_HOST --build-arg VITE_CLIENT_ID_KEYCLOAK --build-arg VITE_SECRET_KEYCLOAK -t ${{ env.REGISTRY }}/${{ github.repository }}/frontend-${{ env.STAGE }}:latest ./frontend

      - name: Push frontend image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/frontend-${{ env.STAGE }}:latest
          

  deploy:
    name: Deploy frontend and backend
    needs: [build_backend, build_frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup SSH
        run: |
            install -m 600 -D /dev/null ~/.ssh/id_rsa
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Create docker context
        run: |
            docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
            docker context use remote

      - name: Log into registry
        run: |
            docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }} ${{ env.REGISTRY }}

      - name: Deploy to remote server
        run: |
            docker compose -p dev stop
            docker compose -p dev rm -f
            docker compose -p dev pull
            docker compose -p dev up -d --force-recreate
