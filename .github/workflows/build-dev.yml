name: dev build and push

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
  push:
    branches:
      - dev
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

  POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.eval.outputs.tag }}
    steps:
      - name: Evaluate Docker Tag
        id: eval
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          else
            TAG=latest
          fi
          echo "Docker tag determined: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build_backend:
    needs: determine-tag
    name: Build backend
    runs-on: ubuntu-latest

    steps:
      - name: Start PostgreSQL service
        run: |
          sudo systemctl start postgresql.service
          pg_isready

      - name: Update db user
        run: |
          sudo -u postgres psql --command="ALTER USER postgres WITH PASSWORD 'postgres'"

      - name: Create synci database
        run: |
          sudo -u postgres psql --command='CREATE DATABASE "synci-db" OWNER postgres;'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build backend image 
        run: |
          docker build --network="host" -t ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ needs.determine-tag.outputs.docker_tag }} ./backend

      - name: Push backend image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ needs.determine-tag.outputs.docker_tag }}


  build_frontend:
    needs: determine-tag
    name: Build frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build frontend image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ needs.determine-tag.outputs.docker_tag }} ./frontend

      - name: Push frontend image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ needs.determine-tag.outputs.docker_tag }}


  deploy:
    name: Deploy frontend and backend
    needs: [build_backend, build_frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Create docker context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          docker context use remote

      - name: Log into registry
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }} ${{ env.REGISTRY }}

      - name: Deploy to remote server
        run: |
          docker compose -p dev stop
          docker compose -p dev rm -f
          docker compose -p dev pull
          docker compose -p dev up -d --force-recreate
